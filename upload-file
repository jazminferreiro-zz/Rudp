#!/usr/bin/env python3
import argparse
import select
import sys
import threading
import time

from model import Client
from model.tcp.TcpClient import TcpClient
from model.udp.UdpClient import UdpClient


def parse_arguments():
  parser = argparse.ArgumentParser()

  parser.add_argument("-H", "--server-host", default="127.0.0.1", help="la dirección IP del servidor")
  parser.add_argument("-P", "--server-port", type=int, default=8080, help="el puerto del servidor")
  parser.add_argument("-s", "--src", help="path del archivo a enviar al servidor", required=True)
  parser.add_argument("-n", "--name", help="el nombre que tomará el archivo en el servidor", required=True)
  parser.add_argument("-p", "--protocol", help="el protocolo a utilizar para la comunicación", default="tcp", choices=['tcp', 'udp'])

  return parser.parse_args()

def wait_signal(client):
  c = None
  while not c:
    c = select.select([sys.stdin], [], [], 1)[0]
  client.stop_running()

def upload_file(client: Client, name, dest):
  signal_thread = threading.Thread(name= "wait-signal-upload",target=wait_signal, args=(client,))
  client.upload(name, dest)
  signal_thread .start()

def main():
  args = parse_arguments()
  server_address = (args.server_host, args.server_port)

  if args.protocol == "tcp":
    client = TcpClient(server_address)
    upload_file(client,  args.src, args.name)
  elif args.protocol == "udp":
    client = UdpClient(server_address)
    upload_file(client, args.src, args.name)
  else:
    raise Exception("protocolo invalido")


main()



